/* =========================================================
 * ====                   WARNING                        ===
 * =========================================================
 * The code in this tab has been generated from the GUI form
 * designer and care should be taken when editing this file.
 * Only add/edit code inside the event handlers i.e. only
 * use lines between the matching comment tags. e.g.

 void myBtnEvents(GButton button) { //_CODE_:button1:12356:
     // It is safe to enter your event code here  
 } //_CODE_:button1:12356:
 
 * Do not rename this tab!
 * =========================================================
 */

public void DEC_pos_click(GImageButton source, GEvent event) { //_CODE_:DEC_pos:640244:
  if( event == GEvent.PRESSED ){
    String msg = command.MoveAxis +"#"+ Axis.axisSecondary + "#";
    sendMsg(msg);
    abortRequired=true;
  }
} //_CODE_:DEC_pos:640244:

public void AR_neg_click(GImageButton source, GEvent event) { //_CODE_:AR_neg:547882:
  if( event == GEvent.PRESSED ){
    String msg = command.MoveAxis +"#"+ Axis.axisSecondary + "#";
    sendMsg(msg);
    abortRequired=true;
  }
} //_CODE_:AR_neg:547882:

public void AR_pos_clicl(GImageButton source, GEvent event) { //_CODE_:AR_pos:330473:
  if( event == GEvent.PRESSED ){
    String msg = command.MoveAxis +"#"+ Axis.axisPrimary + "#";
    sendMsg(msg);
    abortRequired=true;
  }
} //_CODE_:AR_pos:330473:

public void DEC_neg_click(GImageButton source, GEvent event) { //_CODE_:DEC_neg:747980:
  if( event == GEvent.PRESSED ){
    String msg = command.MoveAxis +"#"+ Axis.axisPrimary + "#";
    sendMsg(msg);
    abortRequired=true;
  }
} //_CODE_:DEC_neg:747980:

public void abort_click(GImageButton source, GEvent event) { //_CODE_:abort:617886:
  String msg = command.AbortSlew +"#";
  sendMsg(msg);
} //_CODE_:abort:617886:

public void slew_speed_change(GCustomSlider source, GEvent event) { //_CODE_:slew_speed:359642:
  String msg = command.setSlewRate +"#" + slew_speed.getValueI() + "#";
  sendMsg(msg);
} //_CODE_:slew_speed:359642:

public void park_click(GButton source, GEvent event) { //_CODE_:park:868431:
  String msg = command.Park +"#";
  sendMsg(msg);
} //_CODE_:park:868431:

public void set_park_click(GButton source, GEvent event) { //_CODE_:set_park:856479:
  String msg = command.SetPark +"#";
  sendMsg(msg);
} //_CODE_:set_park:856479:

public void home_click(GButton source, GEvent event) { //_CODE_:home:791884:
  String msg = command.Home +"#";
  sendMsg(msg);
} //_CODE_:home:791884:

public void autoguide_speed_change(GDropList source, GEvent event) { //_CODE_:autoguide_speed:466846:
  String msg = command.AutoguideSpeed +"#"+ autoguide_speed.getSelectedText() +"#";
  sendMsg(msg);
} //_CODE_:autoguide_speed:466846:

public void pier_flip_click(GCheckbox source, GEvent event) { //_CODE_:pier_flip:498115:
  String msg = command.SetPierSide +"#"+ int( pier_flip.isSelected() ) +"#" ;
  sendMsg(msg);
} //_CODE_:pier_flip:498115:

public void tracking_click(GCheckbox source, GEvent event) { //_CODE_:tracking:995913:
  String msg;
  if (tracking.isSelected())
    msg = command.Track +"#" ;
  else
    msg = command.StopTrack +"#";
  sendMsg(msg);
} //_CODE_:tracking:995913:



// Create all the GUI controls. 
// autogenerated do not edit
public void createGUI(){
  G4P.messagesEnabled(false);
  G4P.setGlobalColorScheme(GCScheme.BLUE_SCHEME);
  G4P.setMouseOverEnabled(false);
  surface.setTitle("Sketch Window");
  current_coordinates = new GLabel(this, 20, 140, 320, 30);
  current_coordinates.setText("current coordinates: ");
  current_coordinates.setLocalColorScheme(GCScheme.SCHEME_8);
  current_coordinates.setOpaque(true);
  telescope_sym = new GView(this, 610, 60, 390, 490, P3D);
  DEC_pos = new GImageButton(this, 130, 180, 100, 100, new String[] { "DEC_pos_image.png", "DEC_pos_image.png", "DEC_pos_image_pressed.png" } );
  DEC_pos.addEventHandler(this, "DEC_pos_click");
  AR_neg = new GImageButton(this, 20, 290, 100, 100, new String[] { "AR_neg_image.png", "AR_neg_image.png", "AR_neg_image_pressed.png" } );
  AR_neg.addEventHandler(this, "AR_neg_click");
  AR_pos = new GImageButton(this, 240, 290, 100, 100, new String[] { "AR_pos_image.png", "AR_pos_image.png", "AR_pos_image_pressed.png" } );
  AR_pos.addEventHandler(this, "AR_pos_clicl");
  DEC_neg = new GImageButton(this, 130, 400, 100, 100, new String[] { "DEC_neg_image.png", "DEC_neg_image.png", "DEC_neg_image_pressed.png" } );
  DEC_neg.addEventHandler(this, "DEC_neg_click");
  abort = new GImageButton(this, 130, 290, 100, 100, new String[] { "ABORT_image.png", "ABORT_image.png", "ABORT_image_pressed.png" } );
  abort.addEventHandler(this, "abort_click");
  slew_speed = new GCustomSlider(this, 20, 500, 320, 50, "grey_blue");
  slew_speed.setShowValue(true);
  slew_speed.setShowLimits(true);
  slew_speed.setLimits(8, 1, 8);
  slew_speed.setNbrTicks(10);
  slew_speed.setStickToTicks(true);
  slew_speed.setShowTicks(true);
  slew_speed.setNumberFormat(G4P.INTEGER, 0);
  slew_speed.setLocalColorScheme(GCScheme.SCHEME_8);
  slew_speed.setOpaque(false);
  slew_speed.addEventHandler(this, "slew_speed_change");
  park = new GButton(this, 390, 220, 180, 40);
  park.setText("park telescope");
  park.setLocalColorScheme(GCScheme.SCHEME_8);
  park.addEventHandler(this, "park_click");
  set_park = new GButton(this, 390, 280, 180, 40);
  set_park.setText("set park");
  set_park.setLocalColorScheme(GCScheme.SCHEME_8);
  set_park.addEventHandler(this, "set_park_click");
  home = new GButton(this, 390, 340, 180, 40);
  home.setText("Auto home");
  home.setLocalColorScheme(GCScheme.SCHEME_8);
  home.addEventHandler(this, "home_click");
  autoguide_speed = new GDropList(this, 390, 140, 180, 270, 8, 20);
  autoguide_speed.setItems(loadStrings("list_466846"), 0);
  autoguide_speed.setLocalColorScheme(GCScheme.SCHEME_8);
  autoguide_speed.addEventHandler(this, "autoguide_speed_change");
  pier_flip = new GCheckbox(this, 390, 430, 180, 30);
  pier_flip.setIconAlign(GAlign.LEFT, GAlign.MIDDLE);
  pier_flip.setText("force pier flip?");
  pier_flip.setLocalColorScheme(GCScheme.SCHEME_8);
  pier_flip.setOpaque(true);
  pier_flip.addEventHandler(this, "pier_flip_click");
  tracking = new GCheckbox(this, 390, 520, 180, 30);
  tracking.setIconAlign(GAlign.LEFT, GAlign.MIDDLE);
  tracking.setText("enable sideral trackling?");
  tracking.setLocalColorScheme(GCScheme.SCHEME_8);
  tracking.setOpaque(true);
  tracking.addEventHandler(this, "tracking_click");
  tracking.setSelected(true);
}

// Variable declarations 
// autogenerated do not edit
GLabel current_coordinates; 
GView telescope_sym; 
GImageButton DEC_pos; 
GImageButton AR_neg; 
GImageButton AR_pos; 
GImageButton DEC_neg; 
GImageButton abort; 
GCustomSlider slew_speed; 
GButton park; 
GButton set_park; 
GButton home; 
GDropList autoguide_speed; 
GCheckbox pier_flip; 
GCheckbox tracking; 
